on: 
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # The lambda root folder will match the name of the ECR repository
        lambda_path_ecr: [
          'inference',
          'conversation_memory', 
          'ingestion',
          'list_collections',
        ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ matrix.lambda_path_ecr }} || aws ecr create-repository --repository-name ${{ matrix.lambda_path_ecr }}

    - name: Compute hash of source code
      id: compute-hash
      run: |
        echo "LAMBDA_IMAGE=$(tar -cf - ./${{ matrix.lambda_path_ecr }}/src | sha256sum | cut -d ' ' -f 1)" >> $GITHUB_ENV
      shell: /usr/bin/bash -e {0}

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ./${{ matrix.lambda_path_ecr }}/src
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ matrix.lambda_path_ecr }}
        IMAGE_TAG: ${{ env.LAMBDA_IMAGE }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Create JSON artifact
      run: |
        echo '{"'"${{ matrix.lambda_path_ecr }}"'": {"ECR_REGISTRY": "'"${{ steps.login-ecr.outputs.registry }}"'", "ECR_REPOSITORY": "'"${{ matrix.lambda_path_ecr }}"'", "IMAGE_TAG": "'"${{ env.LAMBDA_IMAGE }}"'"}}' > image_details_${{ matrix.lambda_path_ecr }}.json
    - name: Upload JSON artifact
      uses: actions/upload-artifact@v2
      with:
        name: image-details-${{ matrix.lambda_path_ecr }}
        path: image_details_${{ matrix.lambda_path_ecr }}.json

    - name: Upload updated JSON artifact
      uses: actions/upload-artifact@v2
      with:
        name: image-details
        path: image_details.json
    
  consolidate:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
    - name: Install and use jq
      run: |
        sudo apt-get install -y jq
    - name: Download all artifacts
      uses: actions/download-artifact@v2

    - name: Consolidate artifacts
      run: |
        jq -s add *.json > consolidated.json

    - name: Upload consolidated artifact
      uses: actions/upload-artifact@v2
      with:
        name: consolidated-image-details
        path: consolidated.json
  