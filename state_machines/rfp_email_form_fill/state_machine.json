{
  "Comment": "Retrieves attachments from an email and invokes an AI with the email attachments and a predefied set of promts. A form document is then filled with the AI responses and sent back to the user.",
  "StartAt": "Map SES email to execution metadata",
  "States": {
    "Map SES email to execution metadata": {
      "Comment": "Map an SES email for easier consumption later on in the sate machine",
      "Next": "Parallel",
      "Parameters": {
        "execution_metadata": {
          "bucket": "levio-demo-fev-esta-ses-bucket-dev",
          "work_folder.$": "States.Format('rfp/executions/{}_{}', $$.State.EnteredTime, $.Records[0].ses.mail.messageId)",
          "prompts_JSON_path": "rfp/configuration/rfp_prompts.json",
          "destination_email.$": "$.Records[0].ses.mail.destination",
          "email_id.$": "$.Records[0].ses.mail.messageId",
          "raw_email_key.$": "States.Format('rfp/raw_emails/{}', $.Records[0].ses.mail.messageId)",
          "sender_email.$": "$.Records[0].ses.mail.source",
          "form_to_fill_s3_uri.$": "States.Format('s3://levio-demo-fev-esta-ses-bucket-dev/rfp/executions/{}_{}/formulaire.html', $$.State.EnteredTime, $.Records[0].ses.mail.messageId)"
        }
      },
      "Type": "Pass"
    },
    "Parallel": {
      "Branches": [
        {
          "StartAt": "Create copy of the RFP HTML form",
          "States": {
            "Create copy of the RFP HTML form": {
              "Comment": "Copy the form to be filled into this execution's email folder",
              "End": true,
              "Parameters": {
                "Bucket.$": "$.execution_metadata.bucket",
                "CopySource.$": "States.Format('{}/rfp/configuration/formulaire.html', $.execution_metadata.bucket)",
                "Key.$": "States.Format('{}/formulaire.html', $.execution_metadata.work_folder)"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:copyObject",
              "Type": "Task"
            }
          }
        },
        {
          "StartAt": "Download email attachments",
          "States": {
            "Download email attachments": {
              "Comment": "Extract attachments from a raw email MIME file and stores them in S3",
              "Next": "Convert Attachment to LLM friendly file",
              "Parameters": {
                "FunctionName": "email-attachment-saver-dev",
                "Payload": {
                  "bucket.$": "$.execution_metadata.bucket",
                  "s3_email_key.$": "$.execution_metadata.raw_email_key",
                  "s3_folder_key.$": "States.Format('{}/attachments', $.execution_metadata.work_folder)"
                }
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "Retry": [
                {
                  "BackoffRate": 2,
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3
                }
              ],
              "Type": "Task",
              "ResultPath": "$.download_email_attachments_ouput"
            },
            "Get Prompts": {
              "Comment": "Gets the promps s3 object and convert the escaped JSON to JSON",
              "Next": "Get promps responses",
              "Parameters": {
                "Bucket.$": "$.execution_metadata.bucket",
                "Key.$": "$.execution_metadata.prompts_JSON_path"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
              "ResultPath": "$.get_prompts_output",
              "ResultSelector": {
                "parsed_JSON.$": "States.StringToJson($.Body)"
              },
              "Type": "Task"
            },
            "Get promps responses": {
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Invoke Claude",
                "States": {
                  "Invoke Claude": {
                    "End": true,
                    "Parameters": {
                      "FunctionName": "arn:aws:lambda:us-east-1:446872271111:function:levio-esta-bedrock-invoker:$LATEST",
                      "Payload": {
                        "system_prompt.$": "$.system_prompt",
                        "prompt.$": "$.prompt.prompt",
                        "s3_uris.$": "$.s3_uris"
                      }
                    },
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Retry": [
                      {
                        "BackoffRate": 2,
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException",
                          "ThrottlingException"
                        ],
                        "MaxAttempts": 4,
                        "IntervalSeconds": 120,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "Type": "Task",
                    "ResultSelector": {
                      "body.$": "States.StringToJson($.Payload.body)"
                    },
                    "ResultPath": "$.response"
                  }
                }
              },
              "ItemsPath": "$.get_prompts_output.parsed_JSON.user_prompts",
              "Type": "Map",
              "ItemSelector": {
                "system_prompt.$": "$.get_prompts_output.parsed_JSON.system_prompt",
                "prompt.$": "$$.Map.Item.Value",
                "s3_uris.$": "$.parsed_attachments_for_llm_ouput.attachment_uris"
              },
              "ResultPath": "$.prompt_responses",
              "Next": "Map claude response to document filler argument",
              "MaxConcurrency": 4
            },
            "Map claude response to document filler argument": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Map to document filler arg",
                "States": {
                  "Map to document filler arg": {
                    "Type": "Pass",
                    "End": true,
                    "Parameters": {
                      "replacement_key.$": "$.prompt.document_text_replace_key",
                      "replacement_text.$": "$.response.body.content[0].text"
                    }
                  }
                }
              },
              "Next": "Fill form with Claude responses",
              "ItemsPath": "$.prompt_responses",
              "ResultPath": "$.map_to_document_filler_args_output"
            },
            "Fill form with Claude responses": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:446872271111:function:levio-esta-text-replacer:$LATEST",
                "Payload": {
                  "doc_s3_arn.$": "$.execution_metadata.form_to_fill_s3_uri",
                  "replacements.$": "$.map_to_document_filler_args_output"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.fill_form_output",
              "Next": "Get Filled HMTL form"
            },
            "Get Filled HMTL form": {
              "Type": "Task",
              "Next": "Email filled form",
              "Parameters": {
                "Bucket.$": "$.execution_metadata.bucket",
                "Key.$": "States.Format('{}/formulaire.html', $.execution_metadata.work_folder)"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
              "ResultSelector": {
                "html.$": "$.Body"
              },
              "ResultPath": "$.filled_form_html"
            },
            "Email filled form": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-1:446872271111:function:levio-esta-email-sender:$LATEST",
                "Payload": {
                  "destination_email.$": "$.execution_metadata.sender_email",
                  "sender_email.$": "$.execution_metadata.destination_email[0]",
                  "subject": "",
                  "multipart_mime_type": "alternative",
                  "body": [
                    {
                      "type": "plain",
                      "message": "Voici le formulaire rempli: "
                    },
                    {
                      "type": "html",
                      "message.$": "$.filled_form_html.html"
                    }
                  ]
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            },
            "Convert Attachment to LLM friendly file": {
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Choice",
                "States": {
                  "Choice": {
                    "Choices": [
                      {
                        "Next": "Extract TXT from PDF",
                        "StringMatches": "*.pdf",
                        "Variable": "$"
                      },
                      {
                        "Or": [
                          {
                            "Variable": "$",
                            "StringMatches": "*.txt"
                          },
                          {
                            "Variable": "$",
                            "StringMatches": "*.csv"
                          },
                          {
                            "Variable": "$",
                            "StringMatches": "*.json"
                          },
                          {
                            "Variable": "$",
                            "StringMatches": "*.png"
                          },
                          {
                            "Variable": "$",
                            "StringMatches": "*.jpeg"
                          },
                          {
                            "Variable": "$",
                            "StringMatches": "*.jpg"
                          }
                        ],
                        "Next": "Do nothing on supported file type"
                      },
                      {
                        "Variable": "$",
                        "StringMatches": "*.docx",
                        "Next": "Extract TXT from DOCX"
                      },
                      {
                        "Variable": "$",
                        "StringMatches": "*.xlsx",
                        "Next": "Extract CSV from XLSX"
                      }
                    ],
                    "Default": "Filter out unsupported attachment",
                    "Type": "Choice",
                    "InputPath": "$.attachment_uri"
                  },
                  "Filter out unsupported attachment": {
                    "Comment": "Attachment is not PDF, no other processing needed. Map the input to an array just so it's easier to flatten the results of the map state.",
                    "End": true,
                    "OutputPath": "$.arrr",
                    "Parameters": {
                      "arrr": "[]"
                    },
                    "Type": "Pass"
                  },
                  "Extract TXT from PDF": {
                    "End": true,
                    "OutputPath": "$.Payload.extracted_file_uris",
                    "Parameters": {
                      "FunctionName": "arn:aws:lambda:us-east-1:446872271111:function:rich_pdf_ingestion:$LATEST",
                      "Payload": {
                        "pdf_s3_uri.$": "$"
                      }
                    },
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Retry": [
                      {
                        "BackoffRate": 2,
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3
                      }
                    ],
                    "Type": "Task"
                  },
                  "Do nothing on supported file type": {
                    "Type": "Pass",
                    "End": true,
                    "Parameters": {
                      "arrr.$": "States.Array($)"
                    },
                    "OutputPath": "$.arrr"
                  },
                  "Extract TXT from DOCX": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "OutputPath": "$.extracted_text",
                    "Parameters": {
                      "FunctionName": "arn:aws:lambda:us-east-1:446872271111:function:levio-esta-docx-ingestion-dev:$LATEST",
                      "Payload": {
                        "docx_s3_uri.$": "$"
                      }
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2
                      }
                    ],
                    "End": true,
                    "ResultSelector": {
                      "extracted_text.$": "States.Array($.Payload.attachment_uri)"
                    }
                  },
                  "Extract CSV from XLSX": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "OutputPath": "$.extracted_csv_uri",
                    "Parameters": {
                      "Payload": {
                        "xlsx_s3_uri.$": "$"
                      },
                      "FunctionName": "arn:aws:lambda:us-east-1:446872271111:function:levio-esta-excel-ingestion-dev:$LATEST"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2
                      }
                    ],
                    "End": true,
                    "ResultSelector": {
                      "extracted_csv_uri.$": "States.Array($.Payload.extracted_csv_uri)"
                    }
                  }
                }
              },
              "ItemsPath": "$.download_email_attachments_ouput.Payload.attachments",
              "Next": "Get Prompts",
              "ResultSelector": {
                "attachment_uris.$": "$[*][*]"
              },
              "Type": "Map",
              "ResultPath": "$.parsed_attachments_for_llm_ouput"
            }
          }
        }
      ],
      "End": true,
      "Type": "Parallel"
    }
  }
}